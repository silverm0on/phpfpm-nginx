FROM ghcr.io/surnet/alpine-wkhtmltopdf:3.15.0-0.12.6-full as wkhtmltopdf_image
FROM php:8.1.12-fpm-alpine3.16

ARG SUPPORTED_LOCALES="en_US.UTF-8"
LABEL maintainer="Silver Moon <silver.moon010@yahoo.com>"

ARG VERSION_OS
ENV VERSION_OS=${VERSION_OS}
# Add Repositories
RUN rm -f /etc/apk/repositories &&\
    echo "http://dl-cdn.alpinelinux.org/alpine/v3.16/main" >> /etc/apk/repositories && \
    echo "http://dl-cdn.alpinelinux.org/alpine/v3.16/community" >> /etc/apk/repositories

ENV LD_PRELOAD /usr/lib/preloadable_libiconv.so php
RUN apk add --no-cache --repository http://dl-3.alpinelinux.org/alpine/edge/community gnu-libiconv

# install nginx from source
ENV NGINX_VERSION 1.22.0
ENV NJS_VERSION   0.7.4
ENV PKG_RELEASE   1

RUN set -x \
# create nginx user/group first, to be consistent throughout docker variants
    && addgroup -g 101 -S nginx \
    && adduser -S -D -H -u 101 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx \
    && apkArch="$(cat /etc/apk/arch)" \
    && nginxPackages=" \
        nginx=${NGINX_VERSION}-r${PKG_RELEASE} \
        nginx-module-xslt=${NGINX_VERSION}-r${PKG_RELEASE} \
        nginx-module-geoip=${NGINX_VERSION}-r${PKG_RELEASE} \
        nginx-module-image-filter=${NGINX_VERSION}-r${PKG_RELEASE} \
        nginx-module-njs=${NGINX_VERSION}.${NJS_VERSION}-r${PKG_RELEASE} \
    " \
# install prerequisites for public key and pkg-oss checks
    && apk add --no-cache --virtual .checksum-deps \
        openssl \
    && case "$apkArch" in \
        x86_64|aarch64) \
# arches officially built by upstream
            set -x \
            && KEY_SHA512="e7fa8303923d9b95db37a77ad46c68fd4755ff935d0a534d26eba83de193c76166c68bfe7f65471bf8881004ef4aa6df3e34689c305662750c0172fca5d8552a *stdin" \
            && wget -O /tmp/nginx_signing.rsa.pub https://nginx.org/keys/nginx_signing.rsa.pub \
            && if [ "$(openssl rsa -pubin -in /tmp/nginx_signing.rsa.pub -text -noout | openssl sha512 -r)" = "$KEY_SHA512" ]; then \
                echo "key verification succeeded!"; \
                mv /tmp/nginx_signing.rsa.pub /etc/apk/keys/; \
            else \
                echo "key verification failed!"; \
                exit 1; \
            fi \
            && apk add -X "https://nginx.org/packages/alpine/v$(egrep -o '^[0-9]+\.[0-9]+' /etc/alpine-release)/main" --no-cache $nginxPackages \
            ;; \
        *) \
# we're on an architecture upstream doesn't officially build for
# let's build binaries from the published packaging sources
            set -x \
            && tempDir="$(mktemp -d)" \
            && chown nobody:nobody $tempDir \
            && apk add --no-cache --virtual .build-deps \
                gcc \
                libc-dev \
                make \
                openssl-dev \
                pcre-dev \            
                pcre2-dev \
                zlib-dev \
                linux-headers \
                libxslt-dev \
                gd-dev \
                geoip-dev \
                perl-dev \
                libedit-dev \
                bash \
                alpine-sdk \
                findutils \
            && su nobody -s /bin/sh -c " \
                export HOME=${tempDir} \
                && cd ${tempDir} \
                && curl -f -O https://hg.nginx.org/pkg-oss/archive/696.tar.gz \
                && PKGOSSCHECKSUM=\"fabf394af60d935d7c3f5e36db65dddcced9595fd06d3dfdfabbb77aaea88a5b772ef9c1521531673bdbb2876390cdea3b81c51030d36ab76cf5bfc0bfe79230 *696.tar.gz\" \
                && if [ \"\$(openssl sha512 -r 696.tar.gz)\" = \"\$PKGOSSCHECKSUM\" ]; then \
                    echo \"pkg-oss tarball checksum verification succeeded!\"; \
                else \
                    echo \"pkg-oss tarball checksum verification failed!\"; \
                    exit 1; \
                fi \
                && tar xzvf 696.tar.gz \
                && cd pkg-oss-696 \
                && cd alpine \
                && make all \
                && apk index -o ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz ${tempDir}/packages/alpine/${apkArch}/*.apk \
                && abuild-sign -k ${tempDir}/.abuild/abuild-key.rsa ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz \
                " \
            && cp ${tempDir}/.abuild/abuild-key.rsa.pub /etc/apk/keys/ \
            && apk add -X ${tempDir}/packages/alpine/ --no-cache $nginxPackages \
            ;; \
    esac \
# remove checksum deps
    && apk del .checksum-deps \
# if we have leftovers from building, let's purge them (including extra, unnecessary build deps)
    && if [ -n "$tempDir" ]; then rm -rf "$tempDir"; fi \
    && if [ -n "/etc/apk/keys/abuild-key.rsa.pub" ]; then rm -f /etc/apk/keys/abuild-key.rsa.pub; fi \
    && if [ -n "/etc/apk/keys/nginx_signing.rsa.pub" ]; then rm -f /etc/apk/keys/nginx_signing.rsa.pub; fi \
# Bring in gettext so we can get `envsubst`, then throw
# the rest away. To do this, we need to install `gettext`
# then move `envsubst` out of the way so `gettext` can
# be deleted completely, then move `envsubst` back.
    && apk add --no-cache --virtual .gettext gettext \
    && mv /usr/bin/envsubst /tmp/ \
    \
    && runDeps="$( \
        scanelf --needed --nobanner /tmp/envsubst \
            | awk '{ gsub(/,/, "\nso:", $2); print "so:" $2 }' \
            | sort -u \
            | xargs -r apk info --installed \
            | sort -u \
    )" \
    && apk add --no-cache $runDeps \
    && apk del .gettext \
    && mv /tmp/envsubst /usr/local/bin/ \
# Bring in tzdata so users could set the timezones through the environment
# variables
    && apk add --no-cache tzdata \
# Bring in curl and ca-certificates to make registering on DNS SD easier
    && apk add --no-cache curl ca-certificates \
# forward request and error logs to docker log collector
    && ln -sf /dev/stdout /var/log/nginx/access.log \
    && ln -sf /dev/stderr /var/log/nginx/error.log \
# create a docker-entrypoint.d directory
    && mkdir /docker-entrypoint.d

STOPSIGNAL SIGTERM

COPY scripts/docker-entrypoint.sh /
COPY scripts/healthcheck.sh /usr/local/bin/healthcheck
COPY scripts/10-listen-on-ipv6-by-default.sh /docker-entrypoint.d
COPY scripts/20-envsubst-on-templates.sh /docker-entrypoint.d
COPY scripts/30-tune-worker-processes.sh /docker-entrypoint.d

# Add Dependencies
RUN apk add --update --no-cache \
    g++ \
    python3 \
    supervisor \
    vim \
    bash \
    nodejs \
    npm \
    fcgi \
    git \
    freetype \
    libjpeg-turbo \
    libpng \
    libxpm \
    libwebp \
    libavif \
    curl-dev \
    openssl-dev \
    aom-libs \
    libdav1d \
    libzip \
    icu-libs \
    icu-data-full \
    c-client \
    libressl3.5-libtls \
    libxslt \
    postgresql-libs \
    libpq \
    postgresql-dev \  
    zstd-libs \
    imagemagick \
	imagemagick-libs \
	imagemagick-dev \
    rabbitmq-c-dev \
    && cd /tmp \
    && git clone https://github.com/renatomefi/php-fpm-healthcheck.git \
    && cd php-fpm-healthcheck \
    &&git checkout $PHP_FPM_HEALTHCHECK_COMMIT \
    && cp php-fpm-healthcheck /usr/local/bin/php-fpm-healthcheck \
    && chmod 700 /usr/local/bin/php-fpm-healthcheck \
    && chmod 700 /usr/local/bin/healthcheck \
    && chmod 700 /docker-entrypoint.d/* \
    && chmod 700 /docker-entrypoint.sh \
    && echo "pm.status_path = /status" >> /usr/local/etc/php-fpm.d/www.conf 

ADD https://github.com/mlocati/docker-php-extension-installer/releases/latest/download/install-php-extensions /usr/local/bin/

# Install PHP Extensions
RUN chmod +x /usr/local/bin/install-php-extensions && sync && \
    install-php-extensions gd zip intl imap xsl pgsql opcache bcmath mysqli pdo_mysql redis pcntl gmp imagick apcu mongodb sodium soap sockets amqp mbstring raphf exif

# Configure Extension
RUN docker-php-ext-configure \
    opcache --enable-opcache  && \
    docker-php-ext-enable imagick && \
    docker-php-ext-enable amqp && \
    docker-php-source extract && \
    apk del autoconf g++ make 

# Installing composer
RUN curl -sS https://getcomposer.org/installer -o composer-setup.php
RUN php composer-setup.php --install-dir=/usr/local/bin --filename=composer
RUN rm -rf composer-setup.php

# Installing wkhtmltopdf
COPY --from=wkhtmltopdf_image /bin/wkhtmltopdf /usr/bin/
COPY --from=wkhtmltopdf_image /bin/wkhtmltoimage /usr/bin/

# install openswoole
RUN \
    mkdir /usr/src/php/ext/openswoole && \
    curl -sfL https://github.com/openswoole/swoole-src/archive/v4.12.1.tar.gz -o swoole.tar.gz && \
    tar xfz swoole.tar.gz --strip-components=1 -C /usr/src/php/ext/openswoole && \
    docker-php-ext-configure openswoole \
        --enable-http2   \
        --enable-mysqlnd \
        --enable-openssl \
        --enable-sockets --enable-swoole-curl --enable-swoole-json --with-postgres && \
    docker-php-ext-install -j$(nproc) --ini-name zzz-docker-php-ext-openswoole.ini openswoole && \
    rm -f swoole.tar.gz $HOME/.composer/*-old.phar && \
    docker-php-source delete 

# Clear npm proxy
RUN npm config rm proxy
RUN npm config rm https-proxy

# Setup Working Dir
RUN mkdir -p /var/www/html/public && \
    mkdir -p /etc/supervisor/conf.d

WORKDIR /var/www/html


RUN chown -R www-data:www-data /var/www/
USER www-data

COPY configs/supervisord-openswoole.conf /etc/supervisord.conf
COPY configs/nginx.conf /etc/nginx/nginx.conf
COPY configs/nginx-default.conf /etc/nginx/conf.d/default.conf
COPY configs/index.php /var/www/html/public/index.php
COPY configs/docker-vars.ini /usr/local/etc/php/conf.d/docker-vars.ini

USER root


EXPOSE 80 9000

CMD ["/docker-entrypoint.sh"]
#HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 CMD healthcheck
